Describe Async.Promise
  Before all
    let P = vital#vital#import('Async.Promise')
  End

  Describe .new()
    It creates a promise object with proper state
      let p = P.new({resolve -> resolve(0)})
      " 1 means fulfilled
      Assert Equals(p._state, 1)
      Assert HasKey(p, '_vital_promise')

      let p = P.new({_, reject -> reject(0)})
      " 2 means rejected
      Assert Equals(p._state, 2)
      Assert HasKey(p, '_vital_promise')
    End
  End

  Describe .then()
    It calls its callback after synchronized resolution
      let l = l:
      call P.new({resolve -> resolve(42)})
        \.then({r -> extend(l, {'done' : r})})
        \.catch({-> extend(l, {'done' : -1})})
      Assert Equals(done, 42)
    End

    It calls its callback after asynchronized resolution
      let l = l:
      call P.new({resolve -> timer_start(50, resolve)})
        \.then({-> extend(l, {'done' : 42})})
        \.catch({-> extend(l, {'done' : -1})})
      sleep 100m
      Assert Equals(done, 42)
    End
  End

  Describe .catch()
    It calls its callback after synchronized rejection
      let l = l:
      call P.new({_, reject -> reject(42)})
        \.then({-> extend(l, {'done' : 1})})
        \.catch({r -> extend(l, {'done' : r})})
      Assert Equals(done, 42)
    End

    It calls its callback after asynchronized rejection
      let l = l:
      call P.new({_, reject -> timer_start(50, reject)})
        \.then({-> extend(l, {'done' : 1})})
        \.catch({-> extend(l, {'done' : 42})})
      sleep 100m
      Assert Equals(done, 42)
    End

    It is called when an exceptioin is thrown in upstream
      let l = l:
      call P.new({-> execute('throw 42')})
        \.catch({r -> extend(l, {'done' : r})})
      Assert Equals(done, 42)
    End
  End
End
